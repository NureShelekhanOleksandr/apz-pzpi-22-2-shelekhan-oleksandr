Харківський національний університет радіоелектроніки Факультет комп'ютерних наук
Кафедра програмної інженерії ЗВІТ
з дисципліни 
"Архітектура програмного забезпечення" до лабораторної роботи №2
на тему: "РОЗРОБКА СЕРВЕРНОЇ ЧАСТИНИ СИСТЕМИ"







       Виконав ст. гр. ПЗПІ-22-2 Шелехань Олександр Максимович

            Перевірив Ст. викл. кафедри ПІ Сокорчук Ігор Петрович










Харків 2025

МЕТА РОБОТИ

     Розробка бізнес-логіки та функцій адміністрування для серверної частини програмної системи.
ХІД РОБОТИ

     У процесі виконання роботи було реалізовано наступні функціональні можливості серверної частини програмної системи:
1. Функції адміністрування:
- Було розроблено механізм управління користувачами системи, який дозволяє адміністраторам здійснювати створення, оновлення, видалення, блокування та розблокування
користувачів за потреби.
- Забезпечено функціонал імпорту даних до системи з відповідних файлів, а також експорту існуючих даних із системи з подальшою відправкою їх адміністратору на електронну пошту.
- Реалізовано генерацію звітів для адміністратора про активність користувачів системи, що включає інформацію про всі бронювання користувача, із подальшим відправленням звіту на електронну пошту.
2. Функції управління бронюваннями:
- Забезпечено перевірку доступності об'єктів перед створенням нових бронювань. Це дозволяє уникнути конфліктів у періодах бронювання.
- Реалізовано автоматичне надсилання власникам об'єктів сповіщень про нові бронювання, оновлення або скасування

існуючих бронювань. Такі сповіщення включають детальну інформацію про зміну статусу бронювання.
3. Функції для власників об'єктів:
- Власникам об'єктів надано можливість отримувати звіти, що
містять детальну інформацію про всі бронювання їхніх об'єктів, включаючи загальну кількість бронювань, доходи та інші статистичні дані. Ці звіти формуються у форматі PDF.
4. Функції для користувачів:
- Розроблено функціонал перегляду доступних для бронювання об'єктів у вказаний часовий проміжок, що дозволяє користувачам зручно знаходити вільні місця.
- Запроваджено можливість отримання користувачами спеціальних персоналізованих пропозицій, що включають знижки на
подальші бронювання. Це стимулює користувачів до активнішого використання системи.
5. Генерація звітів:
- Розроблено функціонал для автоматичної генерації звітів на основі даних системи, з використанням шаблонів. Звіти
формуються у форматі PDF та можуть бути відправлені на електронну пошту відповідної сторони (адміністратора, власника чи користувача).

ВИСНОВКИ


У ході виконання роботи було реалізовано бізнес-логіку та функції
адміністрування серверної частини програмної системи. Система забезпечує ефективне управління користувачами, бронюваннями, імпортом та експортом

даних, а також автоматичну генерацію звітів. Усі функціональні можливості були успішно протестовані, що підтверджує їх відповідність поставленим вимогам.

ДОДАТОК А
Відеозапис

Відеозапис презентації результатів лабораторної роботи: https://youtu.be/fYoHHveeax4


ДОДАТОК Б


Рисунок Б.1 — ER-діаграма даних


Рисунок Б.2 — Структура бази даних


Рисунок Б.3 — UML-діаграма прецедентів


Рисунок Б.4 – Діаграма діяльності для бронювання складу


Рисунок Б.5– Діаграма діяльності для аналітики по складу


Рисунок Б.6– Діаграма діяльності резервного копіювання бази даних

ДОДАТОК В
Програмний код
В.1 Математична обробка прикладних даних. Код файлу з алгоритмом машинного навчання для персоналізованих пропозицій
GitHub репозиторій: https://github.com/NureShelekhanOleksandr/apz-pzpi-22-2-shelekhan-oleksandr/blob/main/Lab2/apz-pzpi-22-2-shelekhan-oleksandr-lab2/app/crud/booking.py

190  async def get_personalized_offers(db: AsyncSession, user: User):
191      """
192      Розрахувати персоналізовані пропозиції для користувача на основі попередніх бронювань.
193      """
194      from sklearn.cluster import KMeans
195      import numpy as np
196
197      # Отримати всі бронювання для користувача
198      query = (
199          select(Booking)
200          .where(Booking.user_id == user.id)
201          .options(selectinload(Booking.property))
202      )
203      result = await db.execute(query)
204      bookings = result.scalars().all()
205
206      # Якщо у користувача немає бронювань, повернути порожній список
207      if not bookings:
208          return []
209
210      # Підготувати дані для кластеризації: property_id та тривалість перебування (у днях)
211      data = np.array(
212          [[b.property_id, (b.end_date - b.start_date).days] for b in bookings]
213      )
214
215      # Визначити кількість кластерів
216      n_clusters = min(3, len(data))
217
218      # Застосувати кластеризацію KMeans для групування бронювань у кластери
219      kmeans = KMeans(n_clusters=n_clusters).fit(data)
220      clusters = kmeans.predict(data)
221
222      # Генерувати персоналізовані пропозиції на основі кластерів
223      for cluster in set(clusters):
224          cluster_indices = np.where(clusters == cluster)[0]
225          cluster_bookings = [bookings[i] for i in cluster_indices]
226
227          # Розрахувати знижку на основі кількості бронювань у кластері
228          total_days = sum((b.end_date - b.start_date).days for b in cluster_bookings)
229          discount = min(20.0, 5.0 + 0.1 * total_days)
230
231      return offers

В.2 Адміністрування бізнес-логіки системи. Код адміністративних функцій управління користувачами
GitHub репозиторій: https://github.com/NureShelekhanOleksandr/apz-pzpi-22-2-shelekhan-oleksandr/blob/main/Lab2/apz-pzpi-22-2-shelekhan-oleksandr-lab2/app/routers/user.py

140  @router.put("/{user_id}/block", response_model=User)
141  async def block_user(
142      user_id: int,
143      db: AsyncSession = Depends(get_db),
144      current_user: User = Depends(role_required([Role.ADMIN])),
145  ):
146      """Block a user."""
147      blocked_user = await user_crud.block_user(db, user_id)
148
149      # Notification for blocked user
150      await notification_crud.create_notification(
151          db,
152          NotificationCreate(
153              user_id=blocked_user.id,
154              message="Your account has been temporarily blocked. Please contact support for assistance.",
155              type="error",
156          ),
157      )
158      return blocked_user
159
160  @router.put("/{user_id}/unblock", response_model=User)
161  async def unblock_user(
162      user_id: int,
163      db: AsyncSession = Depends(get_db),
164      current_user: User = Depends(role_required([Role.ADMIN])),
165  ):
166      """Unblock a user."""
167      unblocked_user = await user_crud.unblock_user(db, user_id)
168
169      # Notification for unblocked user
170      await notification_crud.create_notification(
171          db,
172          NotificationCreate(
173              user_id=unblocked_user.id,
174              message="Your account has been unblocked. Welcome back to Smart Booking!",
175              type="success",
176          ),
177      )
178      return unblocked_user

В.3 Резервне копіювання користувацьких даних.
GitHub репозиторій: 

1  import csv
2  from sqlalchemy.orm import Session
3  from sqlalchemy import select, text
4  from app.models import User, Property, Booking, Payment, AccessCode
5  from io import BytesIO
6  import pandas as pd
7  import os
8  from enum import Enum
9  from datetime import datetime
10  from app.email_utils import send_email_task
11
12  def get_data():
13      """Get models and schemas for data import/export."""
14      models = [User, Property, Booking, Payment, AccessCode]
15      schemas = [UserSchema, PropertySchema, BookingSchema, PaymentSchema, AccessCodeSchema]
16      return models, schemas
17
18  async def export_data(db: Session, user_email: str):
19      """Export data to an Excel file and send via email."""
20      # Create a BytesIO object to hold the Excel file
21      output = BytesIO()
22      writer = pd.ExcelWriter(output, engine="xlsxwriter")
23      # Get the models and schemas for data export
24      models, schemas = get_data()
25      # Iterate over each model and schema
26      for model, schema in zip(models, schemas):
27          records = await db.execute(select(model))
28          data = []
29          # Iterate over each record in the database
30          for record in records.scalars():
31              record_dict = schema.from_orm(record).__dict__
32              for key, value in record_dict.items():
33                  if isinstance(value, Enum):
34                      record_dict[key] = value.value
35              data.append(record_dict)
36          # Convert the data to a DataFrame and write to the Excel file
37          df = pd.DataFrame(data)
38          df.to_excel(writer, sheet_name=model.__name__, index=False)
39      writer.close()
40      output.seek(0)
41      file_path = f"exported_data_{datetime.now().strftime('%Y%m%d%H%M%S')}.xlsx"
42      
43      # Write the Excel file to disk
44      with open(file_path, "wb") as f:
45          f.write(output.getvalue())
46      
47      # Send the file via email
48      send_email_task.delay(user_email, "Exported Data", "Please find the exported data attached.", file_path)
49      
50      return file_path
51
52  async def import_data(file, db: Session):
53      """Import data from an Excel file."""
54      # Read the contents of the uploaded file
55      contents = await file.read()
56      # Load the Excel file into a dictionary of DataFrames
57      sheets = pd.read_excel(BytesIO(contents), sheet_name=None)
58      
59      # Get the models and schemas for data import
60      models, schemas = get_data()
61
62      # Iterate over each model and schema
63      for model, schema in zip(models, schemas):
64          sheet_name = model.__name__
65          if sheet_name in sheets:
66              df = sheets[sheet_name]
67              # Iterate over each row in the DataFrame
68              for _, row in df.iterrows():
69                  data = row.to_dict()
70                  record_id = data.get("id")
71                  existing_record = await db.get(model, record_id)
72                  if existing_record:
73                      # Update the existing record
74                      updated_record = schema(**data)
75                      for key, value in updated_record.dict(exclude={"id"}).items():
76                          setattr(existing_record, key, value)
77                  else:
78                      # Create a new record
79                      new_record = schema(**data)
80                      db.add(model(**new_record.dict()))
81                  await db.commit()
82
83      # Reset the sequence for each model
84      for model in models:
85          await reset_sequence(db, model.__tablename__)

ДОДАТОК Е 
Відеозапис

Відеозапис презентації результатів лабораторної роботи: https://youtu.be/fYoHHveeax4
